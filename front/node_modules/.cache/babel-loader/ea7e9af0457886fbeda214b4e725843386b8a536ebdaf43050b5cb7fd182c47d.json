{"ast":null,"code":"// src/errors/errorThrower.ts\nimport { buildErrorThrower } from \"@clerk/shared/error\";\nvar errorThrower = buildErrorThrower({\n  packageName: \"@clerk/clerk-react\"\n});\nfunction setErrorThrowerOptions(options) {\n  errorThrower.setMessages(options).setPackageName(options);\n}\n\n// src/utils/loadClerkJsScript.ts\nimport { parsePublishableKey } from \"@clerk/shared/keys\";\nimport { loadScript } from \"@clerk/shared/loadScript\";\nimport { isValidProxyUrl, proxyUrlToAbsoluteURL } from \"@clerk/shared/proxy\";\nimport { addClerkPrefix } from \"@clerk/shared/url\";\n\n// src/utils/isDevOrStageUrl.tsx\nimport { createDevOrStagingUrlCache } from \"@clerk/shared/keys\";\nvar {\n  isDevOrStagingUrl\n} = createDevOrStagingUrlCache();\n\n// src/utils/versionSelector.ts\nvar versionSelector = (clerkJSVersion, packageVersion = \"5.2.7\") => {\n  if (clerkJSVersion) {\n    return clerkJSVersion;\n  }\n  const prereleaseTag = getPrereleaseTag(packageVersion);\n  if (prereleaseTag) {\n    if (prereleaseTag === \"snapshot\") {\n      return \"5.8.0\";\n    }\n    return prereleaseTag;\n  }\n  return getMajorVersion(packageVersion);\n};\nvar getPrereleaseTag = packageVersion => {\n  var _a;\n  return (_a = packageVersion.trim().replace(/^v/, \"\").match(/-(.+?)(\\.|$)/)) == null ? void 0 : _a[1];\n};\nvar getMajorVersion = packageVersion => packageVersion.trim().replace(/^v/, \"\").split(\".\")[0];\n\n// src/utils/loadClerkJsScript.ts\nvar FAILED_TO_LOAD_ERROR = \"Clerk: Failed to load Clerk\";\nvar loadClerkJsScript = opts => {\n  const {\n    publishableKey\n  } = opts;\n  if (!publishableKey) {\n    errorThrower.throwMissingPublishableKeyError();\n  }\n  const existingScript = document.querySelector(\"script[data-clerk-js-script]\");\n  if (existingScript) {\n    return new Promise((resolve, reject) => {\n      existingScript.addEventListener(\"load\", () => {\n        resolve(existingScript);\n      });\n      existingScript.addEventListener(\"error\", () => {\n        reject(FAILED_TO_LOAD_ERROR);\n      });\n    });\n  }\n  return loadScript(clerkJsScriptUrl(opts), {\n    async: true,\n    crossOrigin: \"anonymous\",\n    beforeLoad: applyClerkJsScriptAttributes(opts)\n  }).catch(() => {\n    throw new Error(FAILED_TO_LOAD_ERROR);\n  });\n};\nvar clerkJsScriptUrl = opts => {\n  var _a, _b;\n  const {\n    clerkJSUrl,\n    clerkJSVariant,\n    clerkJSVersion,\n    proxyUrl,\n    domain,\n    publishableKey\n  } = opts;\n  if (clerkJSUrl) {\n    return clerkJSUrl;\n  }\n  let scriptHost = \"\";\n  if (!!proxyUrl && isValidProxyUrl(proxyUrl)) {\n    scriptHost = proxyUrlToAbsoluteURL(proxyUrl).replace(/http(s)?:\\/\\//, \"\");\n  } else if (domain && !isDevOrStagingUrl(((_a = parsePublishableKey(publishableKey)) == null ? void 0 : _a.frontendApi) || \"\")) {\n    scriptHost = addClerkPrefix(domain);\n  } else {\n    scriptHost = ((_b = parsePublishableKey(publishableKey)) == null ? void 0 : _b.frontendApi) || \"\";\n  }\n  const variant = clerkJSVariant ? `${clerkJSVariant.replace(/\\.+$/, \"\")}.` : \"\";\n  const version = versionSelector(clerkJSVersion);\n  return `https://${scriptHost}/npm/@clerk/clerk-js@${version}/dist/clerk.${variant}browser.js`;\n};\nvar buildClerkJsScriptAttributes = options => {\n  const obj = {};\n  if (options.publishableKey) {\n    obj[\"data-clerk-publishable-key\"] = options.publishableKey;\n  }\n  if (options.proxyUrl) {\n    obj[\"data-clerk-proxy-url\"] = options.proxyUrl;\n  }\n  if (options.domain) {\n    obj[\"data-clerk-domain\"] = options.domain;\n  }\n  return obj;\n};\nvar applyClerkJsScriptAttributes = options => script => {\n  const attributes = buildClerkJsScriptAttributes(options);\n  for (const attribute in attributes) {\n    script.setAttribute(attribute, attributes[attribute]);\n  }\n};\n\n// src/hooks/useAuth.ts\nimport { useCallback } from \"react\";\n\n// src/contexts/AuthContext.ts\nimport { createContextAndHook } from \"@clerk/shared/react\";\nvar [AuthContext, useAuthContext] = createContextAndHook(\"AuthContext\");\n\n// src/contexts/IsomorphicClerkContext.tsx\nimport { ClerkInstanceContext, useClerkInstanceContext } from \"@clerk/shared/react\";\nvar IsomorphicClerkContext = ClerkInstanceContext;\nvar useIsomorphicClerkContext = useClerkInstanceContext;\n\n// src/errors/messages.ts\nvar multipleClerkProvidersError = \"You've added multiple <ClerkProvider> components in your React component tree. Wrap your components in a single <ClerkProvider>.\";\nvar multipleChildrenInButtonComponent = name => `You've passed multiple children components to <${name}/>. You can only pass a single child component or text.`;\nvar invalidStateError = \"Invalid state. Feel free to submit a bug or reach out to support here: https://clerk.com/support\";\nvar unsupportedNonBrowserDomainOrProxyUrlFunction = \"Unsupported usage of isSatellite, domain or proxyUrl. The usage of isSatellite, domain or proxyUrl as function is not supported in non-browser environments.\";\nvar userProfilePageRenderedError = \"<UserProfile.Page /> component needs to be a direct child of `<UserProfile />` or `<UserButton />`.\";\nvar userProfileLinkRenderedError = \"<UserProfile.Link /> component needs to be a direct child of `<UserProfile />` or `<UserButton />`.\";\nvar organizationProfilePageRenderedError = \"<OrganizationProfile.Page /> component needs to be a direct child of `<OrganizationProfile />` or `<OrganizationSwitcher />`.\";\nvar organizationProfileLinkRenderedError = \"<OrganizationProfile.Link /> component needs to be a direct child of `<OrganizationProfile />` or `<OrganizationSwitcher />`.\";\nvar customPagesIgnoredComponent = componentName => `<${componentName} /> can only accept <${componentName}.Page /> and <${componentName}.Link /> as its children. Any other provided component will be ignored.`;\nvar customPageWrongProps = componentName => `Missing props. <${componentName}.Page /> component requires the following props: url, label, labelIcon, alongside with children to be rendered inside the page.`;\nvar customLinkWrongProps = componentName => `Missing props. <${componentName}.Link /> component requires the following props: url, label and labelIcon.`;\nvar useAuthHasRequiresRoleOrPermission = 'Missing parameters. `has` from `useAuth` requires a permission or role key to be passed. Example usage: `has({permission: \"org:posts:edit\"`';\nvar noPathProvidedError = componentName => `The <${componentName}/> component uses path-based routing by default unless a different routing strategy is provided using the \\`routing\\` prop. When path-based routing is used, you need to provide the path where the component is mounted on by using the \\`path\\` prop. Example: <${componentName} path={'/my-path'} />`;\nvar incompatibleRoutingWithPathProvidedError = componentName => `The \\`path\\` prop will only be respected when the Clerk component uses path-based routing. To resolve this error, pass \\`routing='path'\\` to the <${componentName}/> component, or drop the \\`path\\` prop to switch to hash-based routing. For more details please refer to our docs: https://clerk.com/docs`;\n\n// src/hooks/useAssertWrappedByClerkProvider.ts\nimport { useAssertWrappedByClerkProvider as useSharedAssertWrappedByClerkProvider } from \"@clerk/shared/react\";\nvar useAssertWrappedByClerkProvider = source => {\n  useSharedAssertWrappedByClerkProvider(() => {\n    errorThrower.throwMissingClerkProviderError({\n      source\n    });\n  });\n};\n\n// src/hooks/utils.ts\nvar clerkLoaded = isomorphicClerk => {\n  return new Promise(resolve => {\n    if (isomorphicClerk.loaded) {\n      resolve();\n    }\n    isomorphicClerk.addOnLoaded(resolve);\n  });\n};\nvar createGetToken = isomorphicClerk => {\n  return async options => {\n    await clerkLoaded(isomorphicClerk);\n    if (!isomorphicClerk.session) {\n      return null;\n    }\n    return isomorphicClerk.session.getToken(options);\n  };\n};\nvar createSignOut = isomorphicClerk => {\n  return async (...args) => {\n    await clerkLoaded(isomorphicClerk);\n    return isomorphicClerk.signOut(...args);\n  };\n};\n\n// src/hooks/useAuth.ts\nvar useAuth = () => {\n  useAssertWrappedByClerkProvider(\"useAuth\");\n  const {\n    sessionId,\n    userId,\n    actor,\n    orgId,\n    orgRole,\n    orgSlug,\n    orgPermissions\n  } = useAuthContext();\n  const isomorphicClerk = useIsomorphicClerkContext();\n  const getToken = useCallback(createGetToken(isomorphicClerk), [isomorphicClerk]);\n  const signOut = useCallback(createSignOut(isomorphicClerk), [isomorphicClerk]);\n  const has = useCallback(params => {\n    if (!(params == null ? void 0 : params.permission) && !(params == null ? void 0 : params.role)) {\n      errorThrower.throw(useAuthHasRequiresRoleOrPermission);\n    }\n    if (!orgId || !userId || !orgRole || !orgPermissions) {\n      return false;\n    }\n    if (params.permission) {\n      return orgPermissions.includes(params.permission);\n    }\n    if (params.role) {\n      return orgRole === params.role;\n    }\n    return false;\n  }, [orgId, orgRole, userId, orgPermissions]);\n  if (sessionId === void 0 && userId === void 0) {\n    return {\n      isLoaded: false,\n      isSignedIn: void 0,\n      sessionId,\n      userId,\n      actor: void 0,\n      orgId: void 0,\n      orgRole: void 0,\n      orgSlug: void 0,\n      has: void 0,\n      signOut,\n      getToken\n    };\n  }\n  if (sessionId === null && userId === null) {\n    return {\n      isLoaded: true,\n      isSignedIn: false,\n      sessionId,\n      userId,\n      actor: null,\n      orgId: null,\n      orgRole: null,\n      orgSlug: null,\n      has: () => false,\n      signOut,\n      getToken\n    };\n  }\n  if (!!sessionId && !!userId && !!orgId && !!orgRole) {\n    return {\n      isLoaded: true,\n      isSignedIn: true,\n      sessionId,\n      userId,\n      actor: actor || null,\n      orgId,\n      orgRole,\n      orgSlug: orgSlug || null,\n      has,\n      signOut,\n      getToken\n    };\n  }\n  if (!!sessionId && !!userId && !orgId) {\n    return {\n      isLoaded: true,\n      isSignedIn: true,\n      sessionId,\n      userId,\n      actor: actor || null,\n      orgId: null,\n      orgRole: null,\n      orgSlug: null,\n      has: () => false,\n      signOut,\n      getToken\n    };\n  }\n  return errorThrower.throw(invalidStateError);\n};\n\n// src/hooks/useEmailLink.ts\nimport React from \"react\";\nfunction useEmailLink(resource) {\n  const {\n    startEmailLinkFlow,\n    cancelEmailLinkFlow\n  } = React.useMemo(() => resource.createEmailLinkFlow(), [resource]);\n  React.useEffect(() => {\n    return cancelEmailLinkFlow;\n  }, []);\n  return {\n    startEmailLinkFlow,\n    cancelEmailLinkFlow\n  };\n}\n\n// src/hooks/useSignIn.ts\nimport { useClientContext } from \"@clerk/shared/react\";\nimport { eventMethodCalled } from \"@clerk/shared/telemetry\";\nvar useSignIn = () => {\n  var _a;\n  useAssertWrappedByClerkProvider(\"useSignIn\");\n  const isomorphicClerk = useIsomorphicClerkContext();\n  const client = useClientContext();\n  (_a = isomorphicClerk.telemetry) == null ? void 0 : _a.record(eventMethodCalled(\"useSignIn\"));\n  if (!client) {\n    return {\n      isLoaded: false,\n      signIn: void 0,\n      setActive: void 0\n    };\n  }\n  return {\n    isLoaded: true,\n    signIn: client.signIn,\n    setActive: isomorphicClerk.setActive\n  };\n};\n\n// src/hooks/useSignUp.ts\nimport { useClientContext as useClientContext2 } from \"@clerk/shared/react\";\nimport { eventMethodCalled as eventMethodCalled2 } from \"@clerk/shared/telemetry\";\nvar useSignUp = () => {\n  var _a;\n  useAssertWrappedByClerkProvider(\"useSignUp\");\n  const isomorphicClerk = useIsomorphicClerkContext();\n  const client = useClientContext2();\n  (_a = isomorphicClerk.telemetry) == null ? void 0 : _a.record(eventMethodCalled2(\"useSignUp\"));\n  if (!client) {\n    return {\n      isLoaded: false,\n      signUp: void 0,\n      setActive: void 0\n    };\n  }\n  return {\n    isLoaded: true,\n    signUp: client.signUp,\n    setActive: isomorphicClerk.setActive\n  };\n};\n\n// src/hooks/index.ts\nimport { useClerk, useOrganization, useOrganizationList, useSessionList, useUser, useSession } from \"@clerk/shared/react\";\n\n// src/components/controlComponents.tsx\nimport React3 from \"react\";\n\n// src/contexts/SessionContext.tsx\nimport { SessionContext, useSessionContext } from \"@clerk/shared/react\";\n\n// src/components/withClerk.tsx\nimport React2 from \"react\";\nvar withClerk = (Component, displayName) => {\n  displayName = displayName || Component.displayName || Component.name || \"Component\";\n  Component.displayName = displayName;\n  const HOC = props => {\n    useAssertWrappedByClerkProvider(displayName || \"withClerk\");\n    const clerk = useIsomorphicClerkContext();\n    if (!clerk.loaded) {\n      return null;\n    }\n    return /* @__PURE__ */React2.createElement(Component, {\n      ...props,\n      clerk\n    });\n  };\n  HOC.displayName = `withClerk(${displayName})`;\n  return HOC;\n};\n\n// src/components/controlComponents.tsx\nvar SignedIn = ({\n  children\n}) => {\n  useAssertWrappedByClerkProvider(\"SignedIn\");\n  const {\n    userId\n  } = useAuthContext();\n  if (userId) {\n    return /* @__PURE__ */React3.createElement(React3.Fragment, null, children);\n  }\n  return null;\n};\nvar SignedOut = ({\n  children\n}) => {\n  useAssertWrappedByClerkProvider(\"SignedOut\");\n  const {\n    userId\n  } = useAuthContext();\n  if (userId === null) {\n    return /* @__PURE__ */React3.createElement(React3.Fragment, null, children);\n  }\n  return null;\n};\nvar ClerkLoaded = ({\n  children\n}) => {\n  useAssertWrappedByClerkProvider(\"ClerkLoaded\");\n  const isomorphicClerk = useIsomorphicClerkContext();\n  if (!isomorphicClerk.loaded) {\n    return null;\n  }\n  return /* @__PURE__ */React3.createElement(React3.Fragment, null, children);\n};\nvar ClerkLoading = ({\n  children\n}) => {\n  useAssertWrappedByClerkProvider(\"ClerkLoading\");\n  const isomorphicClerk = useIsomorphicClerkContext();\n  if (isomorphicClerk.loaded) {\n    return null;\n  }\n  return /* @__PURE__ */React3.createElement(React3.Fragment, null, children);\n};\nvar Protect = ({\n  children,\n  fallback,\n  ...restAuthorizedParams\n}) => {\n  useAssertWrappedByClerkProvider(\"Protect\");\n  const {\n    isLoaded,\n    has,\n    userId\n  } = useAuth();\n  if (!isLoaded) {\n    return null;\n  }\n  const unauthorized = /* @__PURE__ */React3.createElement(React3.Fragment, null, fallback != null ? fallback : null);\n  const authorized = /* @__PURE__ */React3.createElement(React3.Fragment, null, children);\n  if (!userId) {\n    return unauthorized;\n  }\n  if (typeof restAuthorizedParams.condition === \"function\") {\n    if (restAuthorizedParams.condition(has)) {\n      return authorized;\n    }\n    return unauthorized;\n  }\n  if (restAuthorizedParams.role || restAuthorizedParams.permission) {\n    if (has(restAuthorizedParams)) {\n      return authorized;\n    }\n    return unauthorized;\n  }\n  return authorized;\n};\nvar RedirectToSignIn = withClerk(({\n  clerk,\n  ...props\n}) => {\n  const {\n    client,\n    session\n  } = clerk;\n  const hasActiveSessions = client.activeSessions && client.activeSessions.length > 0;\n  React3.useEffect(() => {\n    if (session === null && hasActiveSessions) {\n      void clerk.redirectToAfterSignOut();\n    } else {\n      void clerk.redirectToSignIn(props);\n    }\n  }, []);\n  return null;\n}, \"RedirectToSignIn\");\nvar RedirectToSignUp = withClerk(({\n  clerk,\n  ...props\n}) => {\n  React3.useEffect(() => {\n    void clerk.redirectToSignUp(props);\n  }, []);\n  return null;\n}, \"RedirectToSignUp\");\nvar RedirectToUserProfile = withClerk(({\n  clerk\n}) => {\n  React3.useEffect(() => {\n    void clerk.redirectToUserProfile();\n  }, []);\n  return null;\n}, \"RedirectToUserProfile\");\nvar RedirectToOrganizationProfile = withClerk(({\n  clerk\n}) => {\n  React3.useEffect(() => {\n    void clerk.redirectToOrganizationProfile();\n  }, []);\n  return null;\n}, \"RedirectToOrganizationProfile\");\nvar RedirectToCreateOrganization = withClerk(({\n  clerk\n}) => {\n  React3.useEffect(() => {\n    void clerk.redirectToCreateOrganization();\n  }, []);\n  return null;\n}, \"RedirectToCreateOrganization\");\nvar AuthenticateWithRedirectCallback = withClerk(({\n  clerk,\n  ...handleRedirectCallbackParams\n}) => {\n  React3.useEffect(() => {\n    void clerk.handleRedirectCallback(handleRedirectCallbackParams);\n  }, []);\n  return null;\n}, \"AuthenticateWithRedirectCallback\");\nvar MultisessionAppSupport = ({\n  children\n}) => {\n  useAssertWrappedByClerkProvider(\"MultisessionAppSupport\");\n  const session = useSessionContext();\n  return /* @__PURE__ */React3.createElement(React3.Fragment, {\n    key: session ? session.id : \"no-users\"\n  }, children);\n};\nexport { errorThrower, setErrorThrowerOptions, multipleClerkProvidersError, multipleChildrenInButtonComponent, unsupportedNonBrowserDomainOrProxyUrlFunction, userProfilePageRenderedError, userProfileLinkRenderedError, organizationProfilePageRenderedError, organizationProfileLinkRenderedError, customPagesIgnoredComponent, customPageWrongProps, customLinkWrongProps, noPathProvidedError, incompatibleRoutingWithPathProvidedError, loadClerkJsScript, clerkJsScriptUrl, buildClerkJsScriptAttributes, IsomorphicClerkContext, withClerk, AuthContext, useAuth, useEmailLink, useSignIn, useSignUp, useClerk, useOrganization, useOrganizationList, useSessionList, useUser, useSession, SignedIn, SignedOut, ClerkLoaded, ClerkLoading, Protect, RedirectToSignIn, RedirectToSignUp, RedirectToUserProfile, RedirectToOrganizationProfile, RedirectToCreateOrganization, AuthenticateWithRedirectCallback, MultisessionAppSupport };","map":{"version":3,"names":["buildErrorThrower","errorThrower","packageName","setErrorThrowerOptions","options","setMessages","setPackageName","parsePublishableKey","loadScript","isValidProxyUrl","proxyUrlToAbsoluteURL","addClerkPrefix","createDevOrStagingUrlCache","isDevOrStagingUrl","versionSelector","clerkJSVersion","packageVersion","prereleaseTag","getPrereleaseTag","getMajorVersion","_a","trim","replace","match","split","FAILED_TO_LOAD_ERROR","loadClerkJsScript","opts","publishableKey","throwMissingPublishableKeyError","existingScript","document","querySelector","Promise","resolve","reject","addEventListener","clerkJsScriptUrl","async","crossOrigin","beforeLoad","applyClerkJsScriptAttributes","catch","Error","_b","clerkJSUrl","clerkJSVariant","proxyUrl","domain","scriptHost","frontendApi","variant","version","buildClerkJsScriptAttributes","obj","script","attributes","attribute","setAttribute","useCallback","createContextAndHook","AuthContext","useAuthContext","ClerkInstanceContext","useClerkInstanceContext","IsomorphicClerkContext","useIsomorphicClerkContext","multipleClerkProvidersError","multipleChildrenInButtonComponent","name","invalidStateError","unsupportedNonBrowserDomainOrProxyUrlFunction","userProfilePageRenderedError","userProfileLinkRenderedError","organizationProfilePageRenderedError","organizationProfileLinkRenderedError","customPagesIgnoredComponent","componentName","customPageWrongProps","customLinkWrongProps","useAuthHasRequiresRoleOrPermission","noPathProvidedError","incompatibleRoutingWithPathProvidedError","useAssertWrappedByClerkProvider","useSharedAssertWrappedByClerkProvider","source","throwMissingClerkProviderError","clerkLoaded","isomorphicClerk","loaded","addOnLoaded","createGetToken","session","getToken","createSignOut","args","signOut","useAuth","sessionId","userId","actor","orgId","orgRole","orgSlug","orgPermissions","has","params","permission","role","throw","includes","isLoaded","isSignedIn","React","useEmailLink","resource","startEmailLinkFlow","cancelEmailLinkFlow","useMemo","createEmailLinkFlow","useEffect","useClientContext","eventMethodCalled","useSignIn","client","telemetry","record","signIn","setActive","useClientContext2","eventMethodCalled2","useSignUp","signUp","useClerk","useOrganization","useOrganizationList","useSessionList","useUser","useSession","React3","SessionContext","useSessionContext","React2","withClerk","Component","displayName","HOC","props","clerk","createElement","SignedIn","children","Fragment","SignedOut","ClerkLoaded","ClerkLoading","Protect","fallback","restAuthorizedParams","unauthorized","authorized","condition","RedirectToSignIn","hasActiveSessions","activeSessions","length","redirectToAfterSignOut","redirectToSignIn","RedirectToSignUp","redirectToSignUp","RedirectToUserProfile","redirectToUserProfile","RedirectToOrganizationProfile","redirectToOrganizationProfile","RedirectToCreateOrganization","redirectToCreateOrganization","AuthenticateWithRedirectCallback","handleRedirectCallbackParams","handleRedirectCallback","MultisessionAppSupport","key","id"],"sources":["/Users/siddharthmalik/Documents/GitHub/Restaurant/front/node_modules/@clerk/clerk-react/src/errors/errorThrower.ts","/Users/siddharthmalik/Documents/GitHub/Restaurant/front/node_modules/@clerk/clerk-react/src/utils/loadClerkJsScript.ts","/Users/siddharthmalik/Documents/GitHub/Restaurant/front/node_modules/@clerk/clerk-react/src/utils/isDevOrStageUrl.tsx","/Users/siddharthmalik/Documents/GitHub/Restaurant/front/node_modules/@clerk/clerk-react/src/utils/versionSelector.ts","/Users/siddharthmalik/Documents/GitHub/Restaurant/front/node_modules/@clerk/clerk-react/src/hooks/useAuth.ts","/Users/siddharthmalik/Documents/GitHub/Restaurant/front/node_modules/@clerk/clerk-react/src/contexts/AuthContext.ts","/Users/siddharthmalik/Documents/GitHub/Restaurant/front/node_modules/@clerk/clerk-react/src/contexts/IsomorphicClerkContext.tsx","/Users/siddharthmalik/Documents/GitHub/Restaurant/front/node_modules/@clerk/clerk-react/src/errors/messages.ts","/Users/siddharthmalik/Documents/GitHub/Restaurant/front/node_modules/@clerk/clerk-react/src/hooks/useAssertWrappedByClerkProvider.ts","/Users/siddharthmalik/Documents/GitHub/Restaurant/front/node_modules/@clerk/clerk-react/src/hooks/utils.ts","/Users/siddharthmalik/Documents/GitHub/Restaurant/front/node_modules/@clerk/clerk-react/src/hooks/useEmailLink.ts","/Users/siddharthmalik/Documents/GitHub/Restaurant/front/node_modules/@clerk/clerk-react/src/hooks/useSignIn.ts","/Users/siddharthmalik/Documents/GitHub/Restaurant/front/node_modules/@clerk/clerk-react/src/hooks/useSignUp.ts","/Users/siddharthmalik/Documents/GitHub/Restaurant/front/node_modules/@clerk/clerk-react/src/hooks/index.ts","/Users/siddharthmalik/Documents/GitHub/Restaurant/front/node_modules/@clerk/clerk-react/src/components/controlComponents.tsx","/Users/siddharthmalik/Documents/GitHub/Restaurant/front/node_modules/@clerk/clerk-react/src/contexts/SessionContext.tsx","/Users/siddharthmalik/Documents/GitHub/Restaurant/front/node_modules/@clerk/clerk-react/src/components/withClerk.tsx"],"sourcesContent":["import type { ErrorThrowerOptions } from '@clerk/shared/error';\nimport { buildErrorThrower } from '@clerk/shared/error';\n\nconst errorThrower = buildErrorThrower({ packageName: '@clerk/clerk-react' });\n\nexport { errorThrower };\n\n/**\n * Overrides options of the internal errorThrower (eg setting packageName prefix).\n *\n * @internal\n */\nexport function setErrorThrowerOptions(options: ErrorThrowerOptions) {\n  errorThrower.setMessages(options).setPackageName(options);\n}\n","import { parsePublishableKey } from '@clerk/shared/keys';\nimport { loadScript } from '@clerk/shared/loadScript';\nimport { isValidProxyUrl, proxyUrlToAbsoluteURL } from '@clerk/shared/proxy';\nimport { addClerkPrefix } from '@clerk/shared/url';\n\nimport { errorThrower } from '../errors/errorThrower';\nimport type { IsomorphicClerkOptions } from '../types';\nimport { isDevOrStagingUrl } from './isDevOrStageUrl';\nimport { versionSelector } from './versionSelector';\n\nconst FAILED_TO_LOAD_ERROR = 'Clerk: Failed to load Clerk';\n\ntype LoadClerkJsScriptOptions = Omit<IsomorphicClerkOptions, 'proxyUrl' | 'domain'> & {\n  proxyUrl?: string;\n  domain?: string;\n};\n\nconst loadClerkJsScript = (opts: LoadClerkJsScriptOptions) => {\n  const { publishableKey } = opts;\n\n  if (!publishableKey) {\n    errorThrower.throwMissingPublishableKeyError();\n  }\n\n  const existingScript = document.querySelector<HTMLScriptElement>('script[data-clerk-js-script]');\n\n  if (existingScript) {\n    return new Promise((resolve, reject) => {\n      existingScript.addEventListener('load', () => {\n        resolve(existingScript);\n      });\n\n      existingScript.addEventListener('error', () => {\n        reject(FAILED_TO_LOAD_ERROR);\n      });\n    });\n  }\n\n  return loadScript(clerkJsScriptUrl(opts), {\n    async: true,\n    crossOrigin: 'anonymous',\n    beforeLoad: applyClerkJsScriptAttributes(opts),\n  }).catch(() => {\n    throw new Error(FAILED_TO_LOAD_ERROR);\n  });\n};\n\nconst clerkJsScriptUrl = (opts: LoadClerkJsScriptOptions) => {\n  const { clerkJSUrl, clerkJSVariant, clerkJSVersion, proxyUrl, domain, publishableKey } = opts;\n\n  if (clerkJSUrl) {\n    return clerkJSUrl;\n  }\n\n  let scriptHost = '';\n  if (!!proxyUrl && isValidProxyUrl(proxyUrl)) {\n    scriptHost = proxyUrlToAbsoluteURL(proxyUrl).replace(/http(s)?:\\/\\//, '');\n  } else if (domain && !isDevOrStagingUrl(parsePublishableKey(publishableKey)?.frontendApi || '')) {\n    scriptHost = addClerkPrefix(domain);\n  } else {\n    scriptHost = parsePublishableKey(publishableKey)?.frontendApi || '';\n  }\n\n  const variant = clerkJSVariant ? `${clerkJSVariant.replace(/\\.+$/, '')}.` : '';\n  const version = versionSelector(clerkJSVersion);\n  return `https://${scriptHost}/npm/@clerk/clerk-js@${version}/dist/clerk.${variant}browser.js`;\n};\n\nconst buildClerkJsScriptAttributes = (options: LoadClerkJsScriptOptions) => {\n  const obj: Record<string, string> = {};\n\n  if (options.publishableKey) {\n    obj['data-clerk-publishable-key'] = options.publishableKey;\n  }\n\n  if (options.proxyUrl) {\n    obj['data-clerk-proxy-url'] = options.proxyUrl;\n  }\n\n  if (options.domain) {\n    obj['data-clerk-domain'] = options.domain;\n  }\n\n  return obj;\n};\n\nconst applyClerkJsScriptAttributes = (options: LoadClerkJsScriptOptions) => (script: HTMLScriptElement) => {\n  const attributes = buildClerkJsScriptAttributes(options);\n  for (const attribute in attributes) {\n    script.setAttribute(attribute, attributes[attribute]);\n  }\n};\n\nexport { loadClerkJsScript, buildClerkJsScriptAttributes, clerkJsScriptUrl };\nexport type { LoadClerkJsScriptOptions };\n","import { createDevOrStagingUrlCache } from '@clerk/shared/keys';\nconst { isDevOrStagingUrl } = createDevOrStagingUrlCache();\nexport { isDevOrStagingUrl };\n","/**\n * This version selector is a bit complicated, so here is the flow:\n * 1. Use the clerkJSVersion prop on the provider\n * 2. Use the exact `@clerk/clerk-js` version if it is a `@snapshot` prerelease for `@clerk/clerk-react`\n * 3. Use the prerelease tag of `@clerk/clerk-react`\n * 4. Fallback to the major version of `@clerk/clerk-react`\n * @param clerkJSVersion - The optional clerkJSVersion prop on the provider\n * @param packageVersion - The version of `@clerk/clerk-react` that will be used if an explicit version is not provided\n * @returns The npm tag, version or major version to use\n */\nexport const versionSelector = (clerkJSVersion: string | undefined, packageVersion = PACKAGE_VERSION) => {\n  if (clerkJSVersion) {\n    return clerkJSVersion;\n  }\n\n  const prereleaseTag = getPrereleaseTag(packageVersion);\n  if (prereleaseTag) {\n    if (prereleaseTag === 'snapshot') {\n      return JS_PACKAGE_VERSION;\n    }\n\n    return prereleaseTag;\n  }\n\n  return getMajorVersion(packageVersion);\n};\n\nconst getPrereleaseTag = (packageVersion: string) =>\n  packageVersion\n    .trim()\n    .replace(/^v/, '')\n    .match(/-(.+?)(\\.|$)/)?.[1];\n\nconst getMajorVersion = (packageVersion: string) => packageVersion.trim().replace(/^v/, '').split('.')[0];\n","import type {\n  ActJWTClaim,\n  CheckAuthorizationWithCustomPermissions,\n  GetToken,\n  OrganizationCustomRoleKey,\n  SignOut,\n} from '@clerk/types';\nimport { useCallback } from 'react';\n\nimport { useAuthContext } from '../contexts/AuthContext';\nimport { useIsomorphicClerkContext } from '../contexts/IsomorphicClerkContext';\nimport { errorThrower } from '../errors/errorThrower';\nimport { invalidStateError, useAuthHasRequiresRoleOrPermission } from '../errors/messages';\nimport { useAssertWrappedByClerkProvider } from './useAssertWrappedByClerkProvider';\nimport { createGetToken, createSignOut } from './utils';\n\ntype CheckAuthorizationSignedOut = undefined;\ntype CheckAuthorizationWithoutOrgOrUser = (params?: Parameters<CheckAuthorizationWithCustomPermissions>[0]) => false;\n\ntype UseAuthReturn =\n  | {\n      isLoaded: false;\n      isSignedIn: undefined;\n      userId: undefined;\n      sessionId: undefined;\n      actor: undefined;\n      orgId: undefined;\n      orgRole: undefined;\n      orgSlug: undefined;\n      has: CheckAuthorizationSignedOut;\n      signOut: SignOut;\n      getToken: GetToken;\n    }\n  | {\n      isLoaded: true;\n      isSignedIn: false;\n      userId: null;\n      sessionId: null;\n      actor: null;\n      orgId: null;\n      orgRole: null;\n      orgSlug: null;\n      has: CheckAuthorizationWithoutOrgOrUser;\n      signOut: SignOut;\n      getToken: GetToken;\n    }\n  | {\n      isLoaded: true;\n      isSignedIn: true;\n      userId: string;\n      sessionId: string;\n      actor: ActJWTClaim | null;\n      orgId: null;\n      orgRole: null;\n      orgSlug: null;\n      has: CheckAuthorizationWithoutOrgOrUser;\n      signOut: SignOut;\n      getToken: GetToken;\n    }\n  | {\n      isLoaded: true;\n      isSignedIn: true;\n      userId: string;\n      sessionId: string;\n      actor: ActJWTClaim | null;\n      orgId: string;\n      orgRole: OrganizationCustomRoleKey;\n      orgSlug: string | null;\n      has: CheckAuthorizationWithCustomPermissions;\n      signOut: SignOut;\n      getToken: GetToken;\n    };\n\ntype UseAuth = () => UseAuthReturn;\n\n/**\n * Returns the current auth state, the user and session ids and the `getToken`\n * that can be used to retrieve the given template or the default Clerk token.\n *\n * Until Clerk loads, `isLoaded` will be set to `false`.\n * Once Clerk loads, `isLoaded` will be set to `true`, and you can\n * safely access the `userId` and `sessionId` variables.\n *\n * For projects using NextJs or Remix, you can have immediate access to this data during SSR\n * simply by using the `ClerkProvider`.\n *\n * @example\n * A simple example:\n *\n * import { useAuth } from '@clerk/clerk-react'\n *\n * function Hello() {\n *   const { isSignedIn, sessionId, userId } = useAuth();\n *   if(isSignedIn) {\n *     return null;\n *   }\n *   console.log(sessionId, userId)\n *   return <div>...</div>\n * }\n *\n * @example\n * Basic example in a NextJs app. This page will be fully rendered during SSR:\n *\n * import { useAuth } from '@clerk/nextjs'\n *\n * export HelloPage = () => {\n *   const { isSignedIn, sessionId, userId } = useAuth();\n *   console.log(isSignedIn, sessionId, userId)\n *   return <div>...</div>\n * }\n */\nexport const useAuth: UseAuth = () => {\n  useAssertWrappedByClerkProvider('useAuth');\n\n  const { sessionId, userId, actor, orgId, orgRole, orgSlug, orgPermissions } = useAuthContext();\n  const isomorphicClerk = useIsomorphicClerkContext();\n\n  const getToken: GetToken = useCallback(createGetToken(isomorphicClerk), [isomorphicClerk]);\n  const signOut: SignOut = useCallback(createSignOut(isomorphicClerk), [isomorphicClerk]);\n\n  const has = useCallback(\n    (params: Parameters<CheckAuthorizationWithCustomPermissions>[0]) => {\n      if (!params?.permission && !params?.role) {\n        errorThrower.throw(useAuthHasRequiresRoleOrPermission);\n      }\n\n      if (!orgId || !userId || !orgRole || !orgPermissions) {\n        return false;\n      }\n\n      if (params.permission) {\n        return orgPermissions.includes(params.permission);\n      }\n\n      if (params.role) {\n        return orgRole === params.role;\n      }\n\n      return false;\n    },\n    [orgId, orgRole, userId, orgPermissions],\n  );\n\n  if (sessionId === undefined && userId === undefined) {\n    return {\n      isLoaded: false,\n      isSignedIn: undefined,\n      sessionId,\n      userId,\n      actor: undefined,\n      orgId: undefined,\n      orgRole: undefined,\n      orgSlug: undefined,\n      has: undefined,\n      signOut,\n      getToken,\n    };\n  }\n\n  if (sessionId === null && userId === null) {\n    return {\n      isLoaded: true,\n      isSignedIn: false,\n      sessionId,\n      userId,\n      actor: null,\n      orgId: null,\n      orgRole: null,\n      orgSlug: null,\n      has: () => false,\n      signOut,\n      getToken,\n    };\n  }\n\n  if (!!sessionId && !!userId && !!orgId && !!orgRole) {\n    return {\n      isLoaded: true,\n      isSignedIn: true,\n      sessionId,\n      userId,\n      actor: actor || null,\n      orgId,\n      orgRole,\n      orgSlug: orgSlug || null,\n      has,\n      signOut,\n      getToken,\n    };\n  }\n\n  if (!!sessionId && !!userId && !orgId) {\n    return {\n      isLoaded: true,\n      isSignedIn: true,\n      sessionId,\n      userId,\n      actor: actor || null,\n      orgId: null,\n      orgRole: null,\n      orgSlug: null,\n      has: () => false,\n      signOut,\n      getToken,\n    };\n  }\n\n  return errorThrower.throw(invalidStateError);\n};\n","import { createContextAndHook } from '@clerk/shared/react';\nimport type { ActJWTClaim, OrganizationCustomPermissionKey, OrganizationCustomRoleKey } from '@clerk/types';\n\nexport const [AuthContext, useAuthContext] = createContextAndHook<{\n  userId: string | null | undefined;\n  sessionId: string | null | undefined;\n  actor: ActJWTClaim | null | undefined;\n  orgId: string | null | undefined;\n  orgRole: OrganizationCustomRoleKey | null | undefined;\n  orgSlug: string | null | undefined;\n  orgPermissions: OrganizationCustomPermissionKey[] | null | undefined;\n}>('AuthContext');\n","import { ClerkInstanceContext, useClerkInstanceContext } from '@clerk/shared/react';\n\nimport type { IsomorphicClerk } from '../isomorphicClerk';\n\nexport const IsomorphicClerkContext = ClerkInstanceContext;\nexport const useIsomorphicClerkContext = useClerkInstanceContext as unknown as () => IsomorphicClerk;\n","export const noClerkProviderError = 'You must wrap your application in a <ClerkProvider> component.';\n\nexport const multipleClerkProvidersError =\n  \"You've added multiple <ClerkProvider> components in your React component tree. Wrap your components in a single <ClerkProvider>.\";\n\nexport const hocChildrenNotAFunctionError = 'Child of WithClerk must be a function.';\n\nexport const multipleChildrenInButtonComponent = (name: string) =>\n  `You've passed multiple children components to <${name}/>. You can only pass a single child component or text.`;\n\nexport const invalidStateError =\n  'Invalid state. Feel free to submit a bug or reach out to support here: https://clerk.com/support';\n\nexport const unsupportedNonBrowserDomainOrProxyUrlFunction =\n  'Unsupported usage of isSatellite, domain or proxyUrl. The usage of isSatellite, domain or proxyUrl as function is not supported in non-browser environments.';\n\nexport const userProfilePageRenderedError =\n  '<UserProfile.Page /> component needs to be a direct child of `<UserProfile />` or `<UserButton />`.';\nexport const userProfileLinkRenderedError =\n  '<UserProfile.Link /> component needs to be a direct child of `<UserProfile />` or `<UserButton />`.';\n\nexport const organizationProfilePageRenderedError =\n  '<OrganizationProfile.Page /> component needs to be a direct child of `<OrganizationProfile />` or `<OrganizationSwitcher />`.';\nexport const organizationProfileLinkRenderedError =\n  '<OrganizationProfile.Link /> component needs to be a direct child of `<OrganizationProfile />` or `<OrganizationSwitcher />`.';\n\nexport const customPagesIgnoredComponent = (componentName: string) =>\n  `<${componentName} /> can only accept <${componentName}.Page /> and <${componentName}.Link /> as its children. Any other provided component will be ignored.`;\n\nexport const customPageWrongProps = (componentName: string) =>\n  `Missing props. <${componentName}.Page /> component requires the following props: url, label, labelIcon, alongside with children to be rendered inside the page.`;\n\nexport const customLinkWrongProps = (componentName: string) =>\n  `Missing props. <${componentName}.Link /> component requires the following props: url, label and labelIcon.`;\n\nexport const useAuthHasRequiresRoleOrPermission =\n  'Missing parameters. `has` from `useAuth` requires a permission or role key to be passed. Example usage: `has({permission: \"org:posts:edit\"`';\n\nexport const noPathProvidedError = (componentName: string) =>\n  `The <${componentName}/> component uses path-based routing by default unless a different routing strategy is provided using the \\`routing\\` prop. When path-based routing is used, you need to provide the path where the component is mounted on by using the \\`path\\` prop. Example: <${componentName} path={'/my-path'} />`;\n\nexport const incompatibleRoutingWithPathProvidedError = (componentName: string) =>\n  `The \\`path\\` prop will only be respected when the Clerk component uses path-based routing. To resolve this error, pass \\`routing='path'\\` to the <${componentName}/> component, or drop the \\`path\\` prop to switch to hash-based routing. For more details please refer to our docs: https://clerk.com/docs`;\n","import { useAssertWrappedByClerkProvider as useSharedAssertWrappedByClerkProvider } from '@clerk/shared/react';\n\nimport { errorThrower } from '../errors/errorThrower';\n\nexport const useAssertWrappedByClerkProvider = (source: string): void => {\n  useSharedAssertWrappedByClerkProvider(() => {\n    errorThrower.throwMissingClerkProviderError({ source });\n  });\n};\n","import type { IsomorphicClerk } from '../isomorphicClerk';\n\n/**\n * @internal\n */\nconst clerkLoaded = (isomorphicClerk: IsomorphicClerk) => {\n  return new Promise<void>(resolve => {\n    if (isomorphicClerk.loaded) {\n      resolve();\n    }\n    isomorphicClerk.addOnLoaded(resolve);\n  });\n};\n\n/**\n * @internal\n */\nexport const createGetToken = (isomorphicClerk: IsomorphicClerk) => {\n  return async (options: any) => {\n    await clerkLoaded(isomorphicClerk);\n    if (!isomorphicClerk.session) {\n      return null;\n    }\n    return isomorphicClerk.session.getToken(options);\n  };\n};\n\n/**\n * @internal\n */\nexport const createSignOut = (isomorphicClerk: IsomorphicClerk) => {\n  return async (...args: any) => {\n    await clerkLoaded(isomorphicClerk);\n    return isomorphicClerk.signOut(...args);\n  };\n};\n","import type {\n  CreateEmailLinkFlowReturn,\n  EmailAddressResource,\n  SignInResource,\n  SignInStartEmailLinkFlowParams,\n  SignUpResource,\n  StartEmailLinkFlowParams,\n} from '@clerk/types';\nimport React from 'react';\n\ntype EmailLinkable = SignUpResource | EmailAddressResource | SignInResource;\ntype UseEmailLinkSignInReturn = CreateEmailLinkFlowReturn<SignInStartEmailLinkFlowParams, SignInResource>;\ntype UseEmailLinkSignUpReturn = CreateEmailLinkFlowReturn<StartEmailLinkFlowParams, SignUpResource>;\ntype UseEmailLinkEmailAddressReturn = CreateEmailLinkFlowReturn<StartEmailLinkFlowParams, EmailAddressResource>;\n\nfunction useEmailLink(resource: SignInResource): UseEmailLinkSignInReturn;\nfunction useEmailLink(resource: SignUpResource): UseEmailLinkSignUpReturn;\nfunction useEmailLink(resource: EmailAddressResource): UseEmailLinkEmailAddressReturn;\nfunction useEmailLink(\n  resource: EmailLinkable,\n): UseEmailLinkSignInReturn | UseEmailLinkSignUpReturn | UseEmailLinkEmailAddressReturn {\n  const { startEmailLinkFlow, cancelEmailLinkFlow } = React.useMemo(() => resource.createEmailLinkFlow(), [resource]);\n\n  React.useEffect(() => {\n    return cancelEmailLinkFlow;\n  }, []);\n\n  return {\n    startEmailLinkFlow,\n    cancelEmailLinkFlow,\n  } as UseEmailLinkSignInReturn | UseEmailLinkSignUpReturn | UseEmailLinkEmailAddressReturn;\n}\n\nexport { useEmailLink };\n","import { useClientContext } from '@clerk/shared/react';\nimport { eventMethodCalled } from '@clerk/shared/telemetry';\nimport type { SetActive, SignInResource } from '@clerk/types';\n\nimport { useIsomorphicClerkContext } from '../contexts/IsomorphicClerkContext';\nimport { useAssertWrappedByClerkProvider } from './useAssertWrappedByClerkProvider';\n\ntype UseSignInReturn =\n  | {\n      isLoaded: false;\n      signIn: undefined;\n      setActive: undefined;\n    }\n  | {\n      isLoaded: true;\n      signIn: SignInResource;\n      setActive: SetActive;\n    };\n\ntype UseSignIn = () => UseSignInReturn;\n\nexport const useSignIn: UseSignIn = () => {\n  useAssertWrappedByClerkProvider('useSignIn');\n\n  const isomorphicClerk = useIsomorphicClerkContext();\n  const client = useClientContext();\n\n  isomorphicClerk.telemetry?.record(eventMethodCalled('useSignIn'));\n\n  if (!client) {\n    return { isLoaded: false, signIn: undefined, setActive: undefined };\n  }\n\n  return {\n    isLoaded: true,\n    signIn: client.signIn,\n    setActive: isomorphicClerk.setActive,\n  };\n};\n","import { useClientContext } from '@clerk/shared/react';\nimport { eventMethodCalled } from '@clerk/shared/telemetry';\nimport type { SetActive, SignUpResource } from '@clerk/types';\n\nimport { useIsomorphicClerkContext } from '../contexts/IsomorphicClerkContext';\nimport { useAssertWrappedByClerkProvider } from './useAssertWrappedByClerkProvider';\n\ntype UseSignUpReturn =\n  | {\n      isLoaded: false;\n      signUp: undefined;\n      setActive: undefined;\n    }\n  | {\n      isLoaded: true;\n      signUp: SignUpResource;\n      setActive: SetActive;\n    };\n\ntype UseSignUp = () => UseSignUpReturn;\n\nexport const useSignUp: UseSignUp = () => {\n  useAssertWrappedByClerkProvider('useSignUp');\n\n  const isomorphicClerk = useIsomorphicClerkContext();\n  const client = useClientContext();\n\n  isomorphicClerk.telemetry?.record(eventMethodCalled('useSignUp'));\n\n  if (!client) {\n    return { isLoaded: false, signUp: undefined, setActive: undefined };\n  }\n\n  return {\n    isLoaded: true,\n    signUp: client.signUp,\n    setActive: isomorphicClerk.setActive,\n  };\n};\n","export { useAuth } from './useAuth';\nexport { useEmailLink } from './useEmailLink';\nexport { useSignIn } from './useSignIn';\nexport { useSignUp } from './useSignUp';\nexport {\n  useClerk,\n  useOrganization,\n  useOrganizationList,\n  useSessionList,\n  useUser,\n  useSession,\n} from '@clerk/shared/react';\n","import type {\n  CheckAuthorizationWithCustomPermissions,\n  HandleOAuthCallbackParams,\n  OrganizationCustomPermissionKey,\n  OrganizationCustomRoleKey,\n} from '@clerk/types';\nimport React from 'react';\n\nimport { useAuthContext } from '../contexts/AuthContext';\nimport { useIsomorphicClerkContext } from '../contexts/IsomorphicClerkContext';\nimport { useSessionContext } from '../contexts/SessionContext';\nimport { useAuth } from '../hooks';\nimport { useAssertWrappedByClerkProvider } from '../hooks/useAssertWrappedByClerkProvider';\nimport type { RedirectToSignInProps, RedirectToSignUpProps, WithClerkProp } from '../types';\nimport { withClerk } from './withClerk';\n\nexport const SignedIn = ({ children }: React.PropsWithChildren<unknown>): JSX.Element | null => {\n  useAssertWrappedByClerkProvider('SignedIn');\n\n  const { userId } = useAuthContext();\n  if (userId) {\n    return <>{children}</>;\n  }\n  return null;\n};\n\nexport const SignedOut = ({ children }: React.PropsWithChildren<unknown>): JSX.Element | null => {\n  useAssertWrappedByClerkProvider('SignedOut');\n\n  const { userId } = useAuthContext();\n  if (userId === null) {\n    return <>{children}</>;\n  }\n  return null;\n};\n\nexport const ClerkLoaded = ({ children }: React.PropsWithChildren<unknown>): JSX.Element | null => {\n  useAssertWrappedByClerkProvider('ClerkLoaded');\n\n  const isomorphicClerk = useIsomorphicClerkContext();\n  if (!isomorphicClerk.loaded) {\n    return null;\n  }\n  return <>{children}</>;\n};\n\nexport const ClerkLoading = ({ children }: React.PropsWithChildren<unknown>): JSX.Element | null => {\n  useAssertWrappedByClerkProvider('ClerkLoading');\n\n  const isomorphicClerk = useIsomorphicClerkContext();\n  if (isomorphicClerk.loaded) {\n    return null;\n  }\n  return <>{children}</>;\n};\n\nexport type ProtectProps = React.PropsWithChildren<\n  (\n    | {\n        condition?: never;\n        role: OrganizationCustomRoleKey;\n        permission?: never;\n      }\n    | {\n        condition?: never;\n        role?: never;\n        permission: OrganizationCustomPermissionKey;\n      }\n    | {\n        condition: (has: CheckAuthorizationWithCustomPermissions) => boolean;\n        role?: never;\n        permission?: never;\n      }\n    | {\n        condition?: never;\n        role?: never;\n        permission?: never;\n      }\n  ) & {\n    fallback?: React.ReactNode;\n  }\n>;\n\n/**\n * Use `<Protect/>` in order to prevent unauthenticated or unauthorized users from accessing the children passed to the component.\n *\n * Examples:\n * ```\n * <Protect permission=\"a_permission_key\" />\n * <Protect role=\"a_role_key\" />\n * <Protect condition={(has) => has({permission:\"a_permission_key\"})} />\n * <Protect condition={(has) => has({role:\"a_role_key\"})} />\n * <Protect fallback={<p>Unauthorized</p>} />\n * ```\n */\nexport const Protect = ({ children, fallback, ...restAuthorizedParams }: ProtectProps) => {\n  useAssertWrappedByClerkProvider('Protect');\n\n  const { isLoaded, has, userId } = useAuth();\n\n  /**\n   * Avoid flickering children or fallback while clerk is loading sessionId or userId\n   */\n  if (!isLoaded) {\n    return null;\n  }\n\n  /**\n   * Fallback to UI provided by user or `null` if authorization checks failed\n   */\n  const unauthorized = <>{fallback ?? null}</>;\n\n  const authorized = <>{children}</>;\n\n  if (!userId) {\n    return unauthorized;\n  }\n\n  /**\n   * Check against the results of `has` called inside the callback\n   */\n  if (typeof restAuthorizedParams.condition === 'function') {\n    if (restAuthorizedParams.condition(has)) {\n      return authorized;\n    }\n    return unauthorized;\n  }\n\n  if (restAuthorizedParams.role || restAuthorizedParams.permission) {\n    if (has(restAuthorizedParams)) {\n      return authorized;\n    }\n    return unauthorized;\n  }\n\n  /**\n   * If neither of the authorization params are passed behave as the `<SignedIn/>`.\n   * If fallback is present render that instead of rendering nothing.\n   */\n  return authorized;\n};\n/* eslint-enable react-hooks/rules-of-hooks */\n\nexport const RedirectToSignIn = withClerk(({ clerk, ...props }: WithClerkProp<RedirectToSignInProps>) => {\n  const { client, session } = clerk;\n  const hasActiveSessions = client.activeSessions && client.activeSessions.length > 0;\n\n  React.useEffect(() => {\n    if (session === null && hasActiveSessions) {\n      void clerk.redirectToAfterSignOut();\n    } else {\n      void clerk.redirectToSignIn(props);\n    }\n  }, []);\n\n  return null;\n}, 'RedirectToSignIn');\n\nexport const RedirectToSignUp = withClerk(({ clerk, ...props }: WithClerkProp<RedirectToSignUpProps>) => {\n  React.useEffect(() => {\n    void clerk.redirectToSignUp(props);\n  }, []);\n\n  return null;\n}, 'RedirectToSignUp');\n\nexport const RedirectToUserProfile = withClerk(({ clerk }) => {\n  React.useEffect(() => {\n    void clerk.redirectToUserProfile();\n  }, []);\n\n  return null;\n}, 'RedirectToUserProfile');\n\nexport const RedirectToOrganizationProfile = withClerk(({ clerk }) => {\n  React.useEffect(() => {\n    void clerk.redirectToOrganizationProfile();\n  }, []);\n\n  return null;\n}, 'RedirectToOrganizationProfile');\n\nexport const RedirectToCreateOrganization = withClerk(({ clerk }) => {\n  React.useEffect(() => {\n    void clerk.redirectToCreateOrganization();\n  }, []);\n\n  return null;\n}, 'RedirectToCreateOrganization');\n\nexport const AuthenticateWithRedirectCallback = withClerk(\n  ({ clerk, ...handleRedirectCallbackParams }: WithClerkProp<HandleOAuthCallbackParams>) => {\n    React.useEffect(() => {\n      void clerk.handleRedirectCallback(handleRedirectCallbackParams);\n    }, []);\n\n    return null;\n  },\n  'AuthenticateWithRedirectCallback',\n);\n\nexport const MultisessionAppSupport = ({ children }: React.PropsWithChildren<unknown>): JSX.Element => {\n  useAssertWrappedByClerkProvider('MultisessionAppSupport');\n\n  const session = useSessionContext();\n  return <React.Fragment key={session ? session.id : 'no-users'}>{children}</React.Fragment>;\n};\n","export { SessionContext, useSessionContext } from '@clerk/shared/react';\n","import type { LoadedClerk, Without } from '@clerk/types';\nimport React from 'react';\n\nimport { useIsomorphicClerkContext } from '../contexts/IsomorphicClerkContext';\nimport { errorThrower } from '../errors/errorThrower';\nimport { hocChildrenNotAFunctionError } from '../errors/messages';\nimport { useAssertWrappedByClerkProvider } from '../hooks/useAssertWrappedByClerkProvider';\n\nexport const withClerk = <P extends { clerk: LoadedClerk }>(\n  Component: React.ComponentType<P>,\n  displayName?: string,\n) => {\n  displayName = displayName || Component.displayName || Component.name || 'Component';\n  Component.displayName = displayName;\n  const HOC = (props: Without<P, 'clerk'>) => {\n    useAssertWrappedByClerkProvider(displayName || 'withClerk');\n\n    const clerk = useIsomorphicClerkContext();\n\n    if (!clerk.loaded) {\n      return null;\n    }\n\n    return (\n      <Component\n        {...(props as P)}\n        clerk={clerk}\n      />\n    );\n  };\n  HOC.displayName = `withClerk(${displayName})`;\n  return HOC;\n};\n\nexport const WithClerk: React.FC<{\n  children: (clerk: LoadedClerk) => React.ReactNode;\n}> = ({ children }) => {\n  const clerk = useIsomorphicClerkContext();\n\n  if (typeof children !== 'function') {\n    errorThrower.throw(hocChildrenNotAFunctionError);\n  }\n\n  if (!clerk.loaded) {\n    return null;\n  }\n\n  return <>{children(clerk as unknown as LoadedClerk)}</>;\n};\n"],"mappings":";AACA,SAASA,iBAAA,QAAyB;AAElC,IAAMC,YAAA,GAAeD,iBAAA,CAAkB;EAAEE,WAAA,EAAa;AAAqB,CAAC;AASrE,SAASC,uBAAuBC,OAAA,EAA8B;EACnEH,YAAA,CAAaI,WAAA,CAAYD,OAAO,EAAEE,cAAA,CAAeF,OAAO;AAC1D;;;ACdA,SAASG,mBAAA,QAA2B;AACpC,SAASC,UAAA,QAAkB;AAC3B,SAASC,eAAA,EAAiBC,qBAAA,QAA6B;AACvD,SAASC,cAAA,QAAsB;;;ACH/B,SAASC,0BAAA,QAAkC;AAC3C,IAAM;EAAEC;AAAkB,IAAID,0BAAA,CAA2B;;;ACSlD,IAAME,eAAA,GAAkBA,CAACC,cAAA,EAAoCC,cAAA,GAAiB,YAAoB;EACvG,IAAID,cAAA,EAAgB;IAClB,OAAOA,cAAA;EACT;EAEA,MAAME,aAAA,GAAgBC,gBAAA,CAAiBF,cAAc;EACrD,IAAIC,aAAA,EAAe;IACjB,IAAIA,aAAA,KAAkB,YAAY;MAChC,OAAO;IACT;IAEA,OAAOA,aAAA;EACT;EAEA,OAAOE,eAAA,CAAgBH,cAAc;AACvC;AAEA,IAAME,gBAAA,GAAoBF,cAAA,IAAwB;EA3BlD,IAAAI,EAAA;EA4BE,QAAAA,EAAA,GAAAJ,cAAA,CACGK,IAAA,CAAK,EACLC,OAAA,CAAQ,MAAM,EAAE,EAChBC,KAAA,CAAM,cAAc,MAHvB,gBAAAH,EAAA,CAG2B;AAAA;AAE7B,IAAMD,eAAA,GAAmBH,cAAA,IAA2BA,cAAA,CAAeK,IAAA,CAAK,EAAEC,OAAA,CAAQ,MAAM,EAAE,EAAEE,KAAA,CAAM,GAAG,EAAE,CAAC;;;AFvBxG,IAAMC,oBAAA,GAAuB;AAO7B,IAAMC,iBAAA,GAAqBC,IAAA,IAAmC;EAC5D,MAAM;IAAEC;EAAe,IAAID,IAAA;EAE3B,IAAI,CAACC,cAAA,EAAgB;IACnB3B,YAAA,CAAa4B,+BAAA,CAAgC;EAC/C;EAEA,MAAMC,cAAA,GAAiBC,QAAA,CAASC,aAAA,CAAiC,8BAA8B;EAE/F,IAAIF,cAAA,EAAgB;IAClB,OAAO,IAAIG,OAAA,CAAQ,CAACC,OAAA,EAASC,MAAA,KAAW;MACtCL,cAAA,CAAeM,gBAAA,CAAiB,QAAQ,MAAM;QAC5CF,OAAA,CAAQJ,cAAc;MACxB,CAAC;MAEDA,cAAA,CAAeM,gBAAA,CAAiB,SAAS,MAAM;QAC7CD,MAAA,CAAOV,oBAAoB;MAC7B,CAAC;IACH,CAAC;EACH;EAEA,OAAOjB,UAAA,CAAW6B,gBAAA,CAAiBV,IAAI,GAAG;IACxCW,KAAA,EAAO;IACPC,WAAA,EAAa;IACbC,UAAA,EAAYC,4BAAA,CAA6Bd,IAAI;EAC/C,CAAC,EAAEe,KAAA,CAAM,MAAM;IACb,MAAM,IAAIC,KAAA,CAAMlB,oBAAoB;EACtC,CAAC;AACH;AAEA,IAAMY,gBAAA,GAAoBV,IAAA,IAAmC;EA/C7D,IAAAP,EAAA,EAAAwB,EAAA;EAgDE,MAAM;IAAEC,UAAA;IAAYC,cAAA;IAAgB/B,cAAA;IAAgBgC,QAAA;IAAUC,MAAA;IAAQpB;EAAe,IAAID,IAAA;EAEzF,IAAIkB,UAAA,EAAY;IACd,OAAOA,UAAA;EACT;EAEA,IAAII,UAAA,GAAa;EACjB,IAAI,CAAC,CAACF,QAAA,IAAYtC,eAAA,CAAgBsC,QAAQ,GAAG;IAC3CE,UAAA,GAAavC,qBAAA,CAAsBqC,QAAQ,EAAEzB,OAAA,CAAQ,iBAAiB,EAAE;EAC1E,WAAW0B,MAAA,IAAU,CAACnC,iBAAA,GAAkBO,EAAA,GAAAb,mBAAA,CAAoBqB,cAAc,MAAlC,gBAAAR,EAAA,CAAqC8B,WAAA,KAAe,EAAE,GAAG;IAC/FD,UAAA,GAAatC,cAAA,CAAeqC,MAAM;EACpC,OAAO;IACLC,UAAA,KAAaL,EAAA,GAAArC,mBAAA,CAAoBqB,cAAc,MAAlC,gBAAAgB,EAAA,CAAqCM,WAAA,KAAe;EACnE;EAEA,MAAMC,OAAA,GAAUL,cAAA,GAAiB,GAAGA,cAAA,CAAexB,OAAA,CAAQ,QAAQ,EAAE,CAAC,MAAM;EAC5E,MAAM8B,OAAA,GAAUtC,eAAA,CAAgBC,cAAc;EAC9C,OAAO,WAAWkC,UAAU,wBAAwBG,OAAO,eAAeD,OAAO;AACnF;AAEA,IAAME,4BAAA,GAAgCjD,OAAA,IAAsC;EAC1E,MAAMkD,GAAA,GAA8B,CAAC;EAErC,IAAIlD,OAAA,CAAQwB,cAAA,EAAgB;IAC1B0B,GAAA,CAAI,4BAA4B,IAAIlD,OAAA,CAAQwB,cAAA;EAC9C;EAEA,IAAIxB,OAAA,CAAQ2C,QAAA,EAAU;IACpBO,GAAA,CAAI,sBAAsB,IAAIlD,OAAA,CAAQ2C,QAAA;EACxC;EAEA,IAAI3C,OAAA,CAAQ4C,MAAA,EAAQ;IAClBM,GAAA,CAAI,mBAAmB,IAAIlD,OAAA,CAAQ4C,MAAA;EACrC;EAEA,OAAOM,GAAA;AACT;AAEA,IAAMb,4BAAA,GAAgCrC,OAAA,IAAuCmD,MAAA,IAA8B;EACzG,MAAMC,UAAA,GAAaH,4BAAA,CAA6BjD,OAAO;EACvD,WAAWqD,SAAA,IAAaD,UAAA,EAAY;IAClCD,MAAA,CAAOG,YAAA,CAAaD,SAAA,EAAWD,UAAA,CAAWC,SAAS,CAAC;EACtD;AACF;;;AGpFA,SAASE,WAAA,QAAmB;;;ACP5B,SAASC,oBAAA,QAA4B;AAG9B,IAAM,CAACC,WAAA,EAAaC,cAAc,IAAIF,oBAAA,CAQ1C,aAAa;;;ACXhB,SAASG,oBAAA,EAAsBC,uBAAA,QAA+B;AAIvD,IAAMC,sBAAA,GAAyBF,oBAAA;AAC/B,IAAMG,yBAAA,GAA4BF,uBAAA;;;ACHlC,IAAMG,2BAAA,GACX;AAIK,IAAMC,iCAAA,GAAqCC,IAAA,IAChD,kDAAkDA,IAAI;AAEjD,IAAMC,iBAAA,GACX;AAEK,IAAMC,6CAAA,GACX;AAEK,IAAMC,4BAAA,GACX;AACK,IAAMC,4BAAA,GACX;AAEK,IAAMC,oCAAA,GACX;AACK,IAAMC,oCAAA,GACX;AAEK,IAAMC,2BAAA,GAA+BC,aAAA,IAC1C,IAAIA,aAAa,wBAAwBA,aAAa,iBAAiBA,aAAa;AAE/E,IAAMC,oBAAA,GAAwBD,aAAA,IACnC,mBAAmBA,aAAa;AAE3B,IAAME,oBAAA,GAAwBF,aAAA,IACnC,mBAAmBA,aAAa;AAE3B,IAAMG,kCAAA,GACX;AAEK,IAAMC,mBAAA,GAAuBJ,aAAA,IAClC,QAAQA,aAAa,qQAAqQA,aAAa;AAElS,IAAMK,wCAAA,GAA4CL,aAAA,IACvD,qJAAqJA,aAAa;;;AC1CpK,SAASM,+BAAA,IAAmCC,qCAAA,QAA6C;AAIlF,IAAMD,+BAAA,GAAmCE,MAAA,IAAyB;EACvED,qCAAA,CAAsC,MAAM;IAC1CnF,YAAA,CAAaqF,8BAAA,CAA+B;MAAED;IAAO,CAAC;EACxD,CAAC;AACH;;;ACHA,IAAME,WAAA,GAAeC,eAAA,IAAqC;EACxD,OAAO,IAAIvD,OAAA,CAAcC,OAAA,IAAW;IAClC,IAAIsD,eAAA,CAAgBC,MAAA,EAAQ;MAC1BvD,OAAA,CAAQ;IACV;IACAsD,eAAA,CAAgBE,WAAA,CAAYxD,OAAO;EACrC,CAAC;AACH;AAKO,IAAMyD,cAAA,GAAkBH,eAAA,IAAqC;EAClE,OAAO,MAAOpF,OAAA,IAAiB;IAC7B,MAAMmF,WAAA,CAAYC,eAAe;IACjC,IAAI,CAACA,eAAA,CAAgBI,OAAA,EAAS;MAC5B,OAAO;IACT;IACA,OAAOJ,eAAA,CAAgBI,OAAA,CAAQC,QAAA,CAASzF,OAAO;EACjD;AACF;AAKO,IAAM0F,aAAA,GAAiBN,eAAA,IAAqC;EACjE,OAAO,UAAUO,IAAA,KAAc;IAC7B,MAAMR,WAAA,CAAYC,eAAe;IACjC,OAAOA,eAAA,CAAgBQ,OAAA,CAAQ,GAAGD,IAAI;EACxC;AACF;;;AL4EO,IAAME,OAAA,GAAmBA,CAAA,KAAM;EACpCd,+BAAA,CAAgC,SAAS;EAEzC,MAAM;IAAEe,SAAA;IAAWC,MAAA;IAAQC,KAAA;IAAOC,KAAA;IAAOC,OAAA;IAASC,OAAA;IAASC;EAAe,IAAI1C,cAAA,CAAe;EAC7F,MAAM0B,eAAA,GAAkBtB,yBAAA,CAA0B;EAElD,MAAM2B,QAAA,GAAqBlC,WAAA,CAAYgC,cAAA,CAAeH,eAAe,GAAG,CAACA,eAAe,CAAC;EACzF,MAAMQ,OAAA,GAAmBrC,WAAA,CAAYmC,aAAA,CAAcN,eAAe,GAAG,CAACA,eAAe,CAAC;EAEtF,MAAMiB,GAAA,GAAM9C,WAAA,CACT+C,MAAA,IAAmE;IAClE,IAAI,EAACA,MAAA,oBAAAA,MAAA,CAAQC,UAAA,KAAc,EAACD,MAAA,oBAAAA,MAAA,CAAQE,IAAA,GAAM;MACxC3G,YAAA,CAAa4G,KAAA,CAAM7B,kCAAkC;IACvD;IAEA,IAAI,CAACqB,KAAA,IAAS,CAACF,MAAA,IAAU,CAACG,OAAA,IAAW,CAACE,cAAA,EAAgB;MACpD,OAAO;IACT;IAEA,IAAIE,MAAA,CAAOC,UAAA,EAAY;MACrB,OAAOH,cAAA,CAAeM,QAAA,CAASJ,MAAA,CAAOC,UAAU;IAClD;IAEA,IAAID,MAAA,CAAOE,IAAA,EAAM;MACf,OAAON,OAAA,KAAYI,MAAA,CAAOE,IAAA;IAC5B;IAEA,OAAO;EACT,GACA,CAACP,KAAA,EAAOC,OAAA,EAASH,MAAA,EAAQK,cAAc,CACzC;EAEA,IAAIN,SAAA,KAAc,UAAaC,MAAA,KAAW,QAAW;IACnD,OAAO;MACLY,QAAA,EAAU;MACVC,UAAA,EAAY;MACZd,SAAA;MACAC,MAAA;MACAC,KAAA,EAAO;MACPC,KAAA,EAAO;MACPC,OAAA,EAAS;MACTC,OAAA,EAAS;MACTE,GAAA,EAAK;MACLT,OAAA;MACAH;IACF;EACF;EAEA,IAAIK,SAAA,KAAc,QAAQC,MAAA,KAAW,MAAM;IACzC,OAAO;MACLY,QAAA,EAAU;MACVC,UAAA,EAAY;MACZd,SAAA;MACAC,MAAA;MACAC,KAAA,EAAO;MACPC,KAAA,EAAO;MACPC,OAAA,EAAS;MACTC,OAAA,EAAS;MACTE,GAAA,EAAKA,CAAA,KAAM;MACXT,OAAA;MACAH;IACF;EACF;EAEA,IAAI,CAAC,CAACK,SAAA,IAAa,CAAC,CAACC,MAAA,IAAU,CAAC,CAACE,KAAA,IAAS,CAAC,CAACC,OAAA,EAAS;IACnD,OAAO;MACLS,QAAA,EAAU;MACVC,UAAA,EAAY;MACZd,SAAA;MACAC,MAAA;MACAC,KAAA,EAAOA,KAAA,IAAS;MAChBC,KAAA;MACAC,OAAA;MACAC,OAAA,EAASA,OAAA,IAAW;MACpBE,GAAA;MACAT,OAAA;MACAH;IACF;EACF;EAEA,IAAI,CAAC,CAACK,SAAA,IAAa,CAAC,CAACC,MAAA,IAAU,CAACE,KAAA,EAAO;IACrC,OAAO;MACLU,QAAA,EAAU;MACVC,UAAA,EAAY;MACZd,SAAA;MACAC,MAAA;MACAC,KAAA,EAAOA,KAAA,IAAS;MAChBC,KAAA,EAAO;MACPC,OAAA,EAAS;MACTC,OAAA,EAAS;MACTE,GAAA,EAAKA,CAAA,KAAM;MACXT,OAAA;MACAH;IACF;EACF;EAEA,OAAO5F,YAAA,CAAa4G,KAAA,CAAMvC,iBAAiB;AAC7C;;;AMxMA,OAAO2C,KAAA,MAAW;AAUlB,SAASC,aACPC,QAAA,EACsF;EACtF,MAAM;IAAEC,kBAAA;IAAoBC;EAAoB,IAAIJ,KAAA,CAAMK,OAAA,CAAQ,MAAMH,QAAA,CAASI,mBAAA,CAAoB,GAAG,CAACJ,QAAQ,CAAC;EAElHF,KAAA,CAAMO,SAAA,CAAU,MAAM;IACpB,OAAOH,mBAAA;EACT,GAAG,EAAE;EAEL,OAAO;IACLD,kBAAA;IACAC;EACF;AACF;;;AC/BA,SAASI,gBAAA,QAAwB;AACjC,SAASC,iBAAA,QAAyB;AAoB3B,IAAMC,SAAA,GAAuBA,CAAA,KAAM;EArB1C,IAAAvG,EAAA;EAsBE+D,+BAAA,CAAgC,WAAW;EAE3C,MAAMK,eAAA,GAAkBtB,yBAAA,CAA0B;EAClD,MAAM0D,MAAA,GAASH,gBAAA,CAAiB;EAEhC,CAAArG,EAAA,GAAAoE,eAAA,CAAgBqC,SAAA,KAAhB,gBAAAzG,EAAA,CAA2B0G,MAAA,CAAOJ,iBAAA,CAAkB,WAAW;EAE/D,IAAI,CAACE,MAAA,EAAQ;IACX,OAAO;MAAEb,QAAA,EAAU;MAAOgB,MAAA,EAAQ;MAAWC,SAAA,EAAW;IAAU;EACpE;EAEA,OAAO;IACLjB,QAAA,EAAU;IACVgB,MAAA,EAAQH,MAAA,CAAOG,MAAA;IACfC,SAAA,EAAWxC,eAAA,CAAgBwC;EAC7B;AACF;;;ACtCA,SAASP,gBAAA,IAAAQ,iBAAA,QAAwB;AACjC,SAASP,iBAAA,IAAAQ,kBAAA,QAAyB;AAoB3B,IAAMC,SAAA,GAAuBA,CAAA,KAAM;EArB1C,IAAA/G,EAAA;EAsBE+D,+BAAA,CAAgC,WAAW;EAE3C,MAAMK,eAAA,GAAkBtB,yBAAA,CAA0B;EAClD,MAAM0D,MAAA,GAASK,iBAAA,CAAiB;EAEhC,CAAA7G,EAAA,GAAAoE,eAAA,CAAgBqC,SAAA,KAAhB,gBAAAzG,EAAA,CAA2B0G,MAAA,CAAOI,kBAAA,CAAkB,WAAW;EAE/D,IAAI,CAACN,MAAA,EAAQ;IACX,OAAO;MAAEb,QAAA,EAAU;MAAOqB,MAAA,EAAQ;MAAWJ,SAAA,EAAW;IAAU;EACpE;EAEA,OAAO;IACLjB,QAAA,EAAU;IACVqB,MAAA,EAAQR,MAAA,CAAOQ,MAAA;IACfJ,SAAA,EAAWxC,eAAA,CAAgBwC;EAC7B;AACF;;;AClCA,SACEK,QAAA,EACAC,eAAA,EACAC,mBAAA,EACAC,cAAA,EACAC,OAAA,EACAC,UAAA,QACK;;;ACLP,OAAOC,MAAA,MAAW;;;ACNlB,SAASC,cAAA,EAAgBC,iBAAA,QAAyB;;;ACClD,OAAOC,MAAA,MAAW;AAOX,IAAMC,SAAA,GAAYA,CACvBC,SAAA,EACAC,WAAA,KACG;EACHA,WAAA,GAAcA,WAAA,IAAeD,SAAA,CAAUC,WAAA,IAAeD,SAAA,CAAU3E,IAAA,IAAQ;EACxE2E,SAAA,CAAUC,WAAA,GAAcA,WAAA;EACxB,MAAMC,GAAA,GAAOC,KAAA,IAA+B;IAC1ChE,+BAAA,CAAgC8D,WAAA,IAAe,WAAW;IAE1D,MAAMG,KAAA,GAAQlF,yBAAA,CAA0B;IAExC,IAAI,CAACkF,KAAA,CAAM3D,MAAA,EAAQ;MACjB,OAAO;IACT;IAEA,OACE,eAAAqD,MAAA,CAAAO,aAAA,CAACL,SAAA;MACE,GAAIG,KAAA;MACLC;IAAA,CACF;EAEJ;EACAF,GAAA,CAAID,WAAA,GAAc,aAAaA,WAAW;EAC1C,OAAOC,GAAA;AACT;;;AFhBO,IAAMI,QAAA,GAAWA,CAAC;EAAEC;AAAS,MAA4D;EAC9FpE,+BAAA,CAAgC,UAAU;EAE1C,MAAM;IAAEgB;EAAO,IAAIrC,cAAA,CAAe;EAClC,IAAIqC,MAAA,EAAQ;IACV,OAAO,eAAAwC,MAAA,CAAAU,aAAA,CAAAV,MAAA,CAAAa,QAAA,QAAGD,QAAS;EACrB;EACA,OAAO;AACT;AAEO,IAAME,SAAA,GAAYA,CAAC;EAAEF;AAAS,MAA4D;EAC/FpE,+BAAA,CAAgC,WAAW;EAE3C,MAAM;IAAEgB;EAAO,IAAIrC,cAAA,CAAe;EAClC,IAAIqC,MAAA,KAAW,MAAM;IACnB,OAAO,eAAAwC,MAAA,CAAAU,aAAA,CAAAV,MAAA,CAAAa,QAAA,QAAGD,QAAS;EACrB;EACA,OAAO;AACT;AAEO,IAAMG,WAAA,GAAcA,CAAC;EAAEH;AAAS,MAA4D;EACjGpE,+BAAA,CAAgC,aAAa;EAE7C,MAAMK,eAAA,GAAkBtB,yBAAA,CAA0B;EAClD,IAAI,CAACsB,eAAA,CAAgBC,MAAA,EAAQ;IAC3B,OAAO;EACT;EACA,OAAO,eAAAkD,MAAA,CAAAU,aAAA,CAAAV,MAAA,CAAAa,QAAA,QAAGD,QAAS;AACrB;AAEO,IAAMI,YAAA,GAAeA,CAAC;EAAEJ;AAAS,MAA4D;EAClGpE,+BAAA,CAAgC,cAAc;EAE9C,MAAMK,eAAA,GAAkBtB,yBAAA,CAA0B;EAClD,IAAIsB,eAAA,CAAgBC,MAAA,EAAQ;IAC1B,OAAO;EACT;EACA,OAAO,eAAAkD,MAAA,CAAAU,aAAA,CAAAV,MAAA,CAAAa,QAAA,QAAGD,QAAS;AACrB;AAyCO,IAAMK,OAAA,GAAUA,CAAC;EAAEL,QAAA;EAAUM,QAAA;EAAU,GAAGC;AAAqB,MAAoB;EACxF3E,+BAAA,CAAgC,SAAS;EAEzC,MAAM;IAAE4B,QAAA;IAAUN,GAAA;IAAKN;EAAO,IAAIF,OAAA,CAAQ;EAK1C,IAAI,CAACc,QAAA,EAAU;IACb,OAAO;EACT;EAKA,MAAMgD,YAAA,GAAe,eAAApB,MAAA,CAAAU,aAAA,CAAAV,MAAA,CAAAa,QAAA,QAAGK,QAAA,WAAAA,QAAA,GAAY,IAAK;EAEzC,MAAMG,UAAA,GAAa,eAAArB,MAAA,CAAAU,aAAA,CAAAV,MAAA,CAAAa,QAAA,QAAGD,QAAS;EAE/B,IAAI,CAACpD,MAAA,EAAQ;IACX,OAAO4D,YAAA;EACT;EAKA,IAAI,OAAOD,oBAAA,CAAqBG,SAAA,KAAc,YAAY;IACxD,IAAIH,oBAAA,CAAqBG,SAAA,CAAUxD,GAAG,GAAG;MACvC,OAAOuD,UAAA;IACT;IACA,OAAOD,YAAA;EACT;EAEA,IAAID,oBAAA,CAAqBlD,IAAA,IAAQkD,oBAAA,CAAqBnD,UAAA,EAAY;IAChE,IAAIF,GAAA,CAAIqD,oBAAoB,GAAG;MAC7B,OAAOE,UAAA;IACT;IACA,OAAOD,YAAA;EACT;EAMA,OAAOC,UAAA;AACT;AAGO,IAAME,gBAAA,GAAmBnB,SAAA,CAAU,CAAC;EAAEK,KAAA;EAAO,GAAGD;AAAM,MAA4C;EACvG,MAAM;IAAEvB,MAAA;IAAQhC;EAAQ,IAAIwD,KAAA;EAC5B,MAAMe,iBAAA,GAAoBvC,MAAA,CAAOwC,cAAA,IAAkBxC,MAAA,CAAOwC,cAAA,CAAeC,MAAA,GAAS;EAElF1B,MAAA,CAAMnB,SAAA,CAAU,MAAM;IACpB,IAAI5B,OAAA,KAAY,QAAQuE,iBAAA,EAAmB;MACzC,KAAKf,KAAA,CAAMkB,sBAAA,CAAuB;IACpC,OAAO;MACL,KAAKlB,KAAA,CAAMmB,gBAAA,CAAiBpB,KAAK;IACnC;EACF,GAAG,EAAE;EAEL,OAAO;AACT,GAAG,kBAAkB;AAEd,IAAMqB,gBAAA,GAAmBzB,SAAA,CAAU,CAAC;EAAEK,KAAA;EAAO,GAAGD;AAAM,MAA4C;EACvGR,MAAA,CAAMnB,SAAA,CAAU,MAAM;IACpB,KAAK4B,KAAA,CAAMqB,gBAAA,CAAiBtB,KAAK;EACnC,GAAG,EAAE;EAEL,OAAO;AACT,GAAG,kBAAkB;AAEd,IAAMuB,qBAAA,GAAwB3B,SAAA,CAAU,CAAC;EAAEK;AAAM,MAAM;EAC5DT,MAAA,CAAMnB,SAAA,CAAU,MAAM;IACpB,KAAK4B,KAAA,CAAMuB,qBAAA,CAAsB;EACnC,GAAG,EAAE;EAEL,OAAO;AACT,GAAG,uBAAuB;AAEnB,IAAMC,6BAAA,GAAgC7B,SAAA,CAAU,CAAC;EAAEK;AAAM,MAAM;EACpET,MAAA,CAAMnB,SAAA,CAAU,MAAM;IACpB,KAAK4B,KAAA,CAAMyB,6BAAA,CAA8B;EAC3C,GAAG,EAAE;EAEL,OAAO;AACT,GAAG,+BAA+B;AAE3B,IAAMC,4BAAA,GAA+B/B,SAAA,CAAU,CAAC;EAAEK;AAAM,MAAM;EACnET,MAAA,CAAMnB,SAAA,CAAU,MAAM;IACpB,KAAK4B,KAAA,CAAM2B,4BAAA,CAA6B;EAC1C,GAAG,EAAE;EAEL,OAAO;AACT,GAAG,8BAA8B;AAE1B,IAAMC,gCAAA,GAAmCjC,SAAA,CAC9C,CAAC;EAAEK,KAAA;EAAO,GAAG6B;AAA6B,MAAgD;EACxFtC,MAAA,CAAMnB,SAAA,CAAU,MAAM;IACpB,KAAK4B,KAAA,CAAM8B,sBAAA,CAAuBD,4BAA4B;EAChE,GAAG,EAAE;EAEL,OAAO;AACT,GACA,kCACF;AAEO,IAAME,sBAAA,GAAyBA,CAAC;EAAE5B;AAAS,MAAqD;EACrGpE,+BAAA,CAAgC,wBAAwB;EAExD,MAAMS,OAAA,GAAUiD,iBAAA,CAAkB;EAClC,OAAO,eAAAF,MAAA,CAAAU,aAAA,CAACV,MAAA,CAAMa,QAAA,EAAN;IAAe4B,GAAA,EAAKxF,OAAA,GAAUA,OAAA,CAAQyF,EAAA,GAAK;EAAA,GAAa9B,QAAS;AAC3E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}